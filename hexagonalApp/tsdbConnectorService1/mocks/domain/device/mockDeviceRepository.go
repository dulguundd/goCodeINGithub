// Code generated by MockGen. DO NOT EDIT.
// Source: device.go

// Package device is a generated GoMock package.
package device

import (
	reflect "reflect"
	device "tsdbConnectorService1/domain/device"

	errs "github.com/dulguundd/logError-lib/errs"
	gomock "github.com/golang/mock/gomock"
)

// MockDeviceRepository is a mock of DeviceRepository interface.
type MockDeviceRepository struct {
	ctrl     *gomock.Controller
	recorder *MockDeviceRepositoryMockRecorder
}

// MockDeviceRepositoryMockRecorder is the mock recorder for MockDeviceRepository.
type MockDeviceRepositoryMockRecorder struct {
	mock *MockDeviceRepository
}

// NewMockDeviceRepository creates a new mock instance.
func NewMockDeviceRepository(ctrl *gomock.Controller) *MockDeviceRepository {
	mock := &MockDeviceRepository{ctrl: ctrl}
	mock.recorder = &MockDeviceRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDeviceRepository) EXPECT() *MockDeviceRepositoryMockRecorder {
	return m.recorder
}

// GetAllDevice mocks base method.
func (m *MockDeviceRepository) GetAllDevice() ([]device.Device, *errs.AppError) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllDevice")
	ret0, _ := ret[0].([]device.Device)
	ret1, _ := ret[1].(*errs.AppError)
	return ret0, ret1
}

// GetAllDevice indicates an expected call of GetAllDevice.
func (mr *MockDeviceRepositoryMockRecorder) GetAllDevice() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllDevice", reflect.TypeOf((*MockDeviceRepository)(nil).GetAllDevice))
}

// GetDevice mocks base method.
func (m *MockDeviceRepository) GetDevice(id int) (*device.Device, *errs.AppError) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDevice", id)
	ret0, _ := ret[0].(*device.Device)
	ret1, _ := ret[1].(*errs.AppError)
	return ret0, ret1
}

// GetDevice indicates an expected call of GetDevice.
func (mr *MockDeviceRepositoryMockRecorder) GetDevice(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDevice", reflect.TypeOf((*MockDeviceRepository)(nil).GetDevice), id)
}
